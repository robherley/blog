<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on rob's blog</title><link>https://blog.reb.gg/tags/golang/</link><description>Recent content in Golang on rob's blog</description><generator>Hugo</generator><language>en-us</language><copyright>Rob Herley</copyright><lastBuildDate>Fri, 04 Oct 2024 13:50:16 -0400</lastBuildDate><atom:link href="https://blog.reb.gg/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>‚úÇÔ∏è snips.sh retrospective: 1000+ stars later</title><link>https://blog.reb.gg/posts/09-snips-retro/</link><pubDate>Fri, 04 Oct 2024 13:50:16 -0400</pubDate><guid>https://blog.reb.gg/posts/09-snips-retro/</guid><description>&lt;blockquote class="twitter-tweet" data-cards="hidden" align="center" data-dnt="true" data-theme="dark">&lt;p lang="en" dir="ltr">Finally released &lt;a href="https://t.co/GEAONuN7Mt">https://t.co/GEAONuN7Mt&lt;/a> üéâ&lt;br>&lt;br>Need to upload a code snippet?&lt;br>&lt;br>echo &amp;quot;something&amp;quot; | ssh &lt;a href="https://t.co/GEAONuN7Mt">https://t.co/GEAONuN7Mt&lt;/a>&lt;br>&lt;br>It&amp;#39;s a free, anonymous, open source, snippet hosting service &lt;a href="https://t.co/u2hUvl9gRO">pic.twitter.com/u2hUvl9gRO&lt;/a>&lt;/p>&amp;mdash; Rob Herley (@robherley) &lt;a href="https://twitter.com/robherley/status/1657139515557920770?ref_src=twsrc%5Etfw">May 12, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>





&lt;h2 id="what-the-snip">
 &lt;a href="#what-the-snip">#&lt;/a>
 What the snip?
&lt;/h2>
&lt;p>A tad bit over a year ago, I released &lt;a href="https://snips.sh">https://snips.sh&lt;/a>, a passwordless, anonymous SSH-powered pastebin with a human-friendly TUI and web UI. No logins, no passwords, nothing to install. It&amp;rsquo;s ready-to-go on any machine that has SSH installed.&lt;/p></description></item><item><title>üé® Beautify your Go tests on GitHub Actions</title><link>https://blog.reb.gg/posts/08-beautify-go-tests/</link><pubDate>Sat, 23 Jul 2022 00:51:58 -0400</pubDate><guid>https://blog.reb.gg/posts/08-beautify-go-tests/</guid><description>&lt;h2 id="was-this-made-for-humans">
 &lt;a href="#was-this-made-for-humans">#&lt;/a>
 Was this made for humans?
&lt;/h2>
&lt;p>Although simple, Go&amp;rsquo;s default testing output leaves a lot to be desired:&lt;/p>


 &lt;img src="https://blog.reb.gg/content/beautify-go-tests/gotest.png" alt="go test output">

&lt;p>This has led rise to some other wrappers for &lt;code>go test&lt;/code>, solely to be a better formatter for humans. For example, &lt;a href="https://github.com/gotestyourself/gotestsum">&lt;code>gotestsum&lt;/code>&lt;/a> does this quite well:&lt;/p>


 &lt;img src="https://blog.reb.gg/content/beautify-go-tests/gotestsum.png" alt="gotestsum output">

&lt;p>This is definitely an improvement, and &lt;code>gotestsum&lt;/code> even has additional formatting like exporting to JUnit XML.&lt;/p>
&lt;p>But, what if CI could produce a rich, interactive, summary like this:&lt;/p></description></item><item><title>‚òï Rewriting tiny.coffee to &lt; 100 lines of Go</title><link>https://blog.reb.gg/posts/07-go-tiny-coffee/</link><pubDate>Sun, 06 Mar 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/07-go-tiny-coffee/</guid><description>&lt;h2 id="history-of-tinycoffee">
 &lt;a href="#history-of-tinycoffee">#&lt;/a>
 History of tiny.coffee
&lt;/h2>
&lt;p>There are people in this world that suffer from an incredible problem &amp;ndash; the &lt;strong>unresistable urge&lt;/strong> to buy vanity domains. I am one of those people, and one of favorites (excluding my brief ownership of &lt;code>ibm.lol&lt;/code>)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> is &lt;a href="https://tiny.coffee">tiny.coffee&lt;/a>.&lt;/p>
&lt;p>At first I didn&amp;rsquo;t know &lt;em>what&lt;/em> I wanted to do with it, but then I was inspired by &lt;a href="https://github.com/hugomd/parrot.live">parrot.live&lt;/a>! When running &lt;code>curl parrot.live&lt;/code>, you will be greeted with a ASCII party parrot in your terminal:&lt;/p></description></item></channel></rss>
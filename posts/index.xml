<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on rob's blog</title><link>https://blog.reb.gg/posts/</link><description>Recent content in Posts on rob's blog</description><generator>Hugo</generator><language>en-us</language><copyright>Rob Herley</copyright><lastBuildDate>Fri, 04 Oct 2024 13:50:16 -0400</lastBuildDate><atom:link href="https://blog.reb.gg/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>‚úÇÔ∏è snips.sh retrospective: 1000+ stars later</title><link>https://blog.reb.gg/posts/09-snips-retro/</link><pubDate>Fri, 04 Oct 2024 13:50:16 -0400</pubDate><guid>https://blog.reb.gg/posts/09-snips-retro/</guid><description>&lt;blockquote class="twitter-tweet" data-cards="hidden" align="center" data-dnt="true" data-theme="dark">&lt;p lang="en" dir="ltr">Finally released &lt;a href="https://t.co/GEAONuN7Mt">https://t.co/GEAONuN7Mt&lt;/a> üéâ&lt;br>&lt;br>Need to upload a code snippet?&lt;br>&lt;br>echo &amp;quot;something&amp;quot; | ssh &lt;a href="https://t.co/GEAONuN7Mt">https://t.co/GEAONuN7Mt&lt;/a>&lt;br>&lt;br>It&amp;#39;s a free, anonymous, open source, snippet hosting service &lt;a href="https://t.co/u2hUvl9gRO">pic.twitter.com/u2hUvl9gRO&lt;/a>&lt;/p>&amp;mdash; Rob Herley (@robherley) &lt;a href="https://twitter.com/robherley/status/1657139515557920770?ref_src=twsrc%5Etfw">May 12, 2023&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>





&lt;h2 id="what-the-snip">
 &lt;a href="#what-the-snip">#&lt;/a>
 What the snip?
&lt;/h2>
&lt;p>A tad bit over a year ago, I released &lt;a href="https://snips.sh">https://snips.sh&lt;/a>, a passwordless, anonymous SSH-powered pastebin with a human-friendly TUI and web UI. No logins, no passwords, nothing to install. It&amp;rsquo;s ready-to-go on any machine that has SSH installed.&lt;/p></description></item><item><title>üé® Beautify your Go tests on GitHub Actions</title><link>https://blog.reb.gg/posts/08-beautify-go-tests/</link><pubDate>Sat, 23 Jul 2022 00:51:58 -0400</pubDate><guid>https://blog.reb.gg/posts/08-beautify-go-tests/</guid><description>&lt;h2 id="was-this-made-for-humans">
 &lt;a href="#was-this-made-for-humans">#&lt;/a>
 Was this made for humans?
&lt;/h2>
&lt;p>Although simple, Go&amp;rsquo;s default testing output leaves a lot to be desired:&lt;/p>


 &lt;img src="https://blog.reb.gg/content/beautify-go-tests/gotest.png" alt="go test output">

&lt;p>This has led rise to some other wrappers for &lt;code>go test&lt;/code>, solely to be a better formatter for humans. For example, &lt;a href="https://github.com/gotestyourself/gotestsum">&lt;code>gotestsum&lt;/code>&lt;/a> does this quite well:&lt;/p>


 &lt;img src="https://blog.reb.gg/content/beautify-go-tests/gotestsum.png" alt="gotestsum output">

&lt;p>This is definitely an improvement, and &lt;code>gotestsum&lt;/code> even has additional formatting like exporting to JUnit XML.&lt;/p>
&lt;p>But, what if CI could produce a rich, interactive, summary like this:&lt;/p></description></item><item><title>‚òï Rewriting tiny.coffee to &lt; 100 lines of Go</title><link>https://blog.reb.gg/posts/07-go-tiny-coffee/</link><pubDate>Sun, 06 Mar 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/07-go-tiny-coffee/</guid><description>&lt;h2 id="history-of-tinycoffee">
 &lt;a href="#history-of-tinycoffee">#&lt;/a>
 History of tiny.coffee
&lt;/h2>
&lt;p>There are people in this world that suffer from an incredible problem &amp;ndash; the &lt;strong>unresistable urge&lt;/strong> to buy vanity domains. I am one of those people, and one of favorites (excluding my brief ownership of &lt;code>ibm.lol&lt;/code>)&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup> is &lt;a href="https://tiny.coffee">tiny.coffee&lt;/a>.&lt;/p>
&lt;p>At first I didn&amp;rsquo;t know &lt;em>what&lt;/em> I wanted to do with it, but then I was inspired by &lt;a href="https://github.com/hugomd/parrot.live">parrot.live&lt;/a>! When running &lt;code>curl parrot.live&lt;/code>, you will be greeted with a ASCII party parrot in your terminal:&lt;/p></description></item><item><title>üè° Homelab VI: Terraforming Proxmox</title><link>https://blog.reb.gg/posts/06-homelab-pt6/</link><pubDate>Fri, 14 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/06-homelab-pt6/</guid><description>&lt;p>In the previous part of this series, I configured a template VM with cloud-init configs for zero intervention VM automation after provision.&lt;/p>
&lt;p>In this part, I&amp;rsquo;ll setup a basic HashiCorp Terraform project for infrastructure as code (IaC) to provision the guest VMs and containers from Proxmox. This will be a great foundation for the homelab, as Terraform can be expanded to cloud automation as well, such as &lt;a href="https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs">managing Cloudflare DNS records&lt;/a>.&lt;/p></description></item><item><title>üè° Homelab V: Proxmox VMs and cloud-init</title><link>https://blog.reb.gg/posts/05-homelab-pt5/</link><pubDate>Thu, 13 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/05-homelab-pt5/</guid><description>&lt;p>In the previous part of this series, I setup a Proxmox dynamic inventory with Ansible and created a basic LXC template for creating containers that were automation ready.&lt;/p>
&lt;p>In this part, I&amp;rsquo;ll setup some &lt;a href="https://cloudinit.readthedocs.io/en/latest/">cloud-init&lt;/a> configs to initalize VMs in a state where they can automatically be managed by Ansible.&lt;/p>
&lt;h2 id="cloud-images">
 &lt;a href="#cloud-images">#&lt;/a>
 Cloud Images
&lt;/h2>
&lt;p>While it&amp;rsquo;s possible to prepare custom base images for cloud-init, many Linux distributions already provide ready-to-use images, such as &lt;a href="https://cloud-images.ubuntu.com">Ubuntu&lt;/a>, &lt;a href="https://alt.fedoraproject.org/cloud/">Fedora&lt;/a>, &lt;a href="https://cloud.debian.org/images/cloud/">Debian&lt;/a>, etc. This allows for a (mostly) unified configuration that can work across distros and even some *BSD variants.&lt;/p></description></item><item><title>üè° Homelab IV: Proxmox Dynamic Inventory and LXC Templates</title><link>https://blog.reb.gg/posts/04-homelab-pt4/</link><pubDate>Wed, 12 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/04-homelab-pt4/</guid><description>&lt;p>In the previous part of this series, I configured Ansible and made some basic playbooks for the homelab management. Eventually, I&amp;rsquo;ll be deploying a plethora of VMs and containers, but managing a gigantic inventory every time a guest is spun up/down would be a hassle. Fortunately, there are community plugins for Ansible that allow the use of a Proxmox cluster as a &lt;a href="https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html">dynamic inventory&lt;/a>.&lt;/p>
&lt;p>In this part, I&amp;rsquo;ll setup some Proxmox API users for automation, setup a dynamic inventory for Proxmox guests and prepare a template for Linux containers.&lt;/p></description></item><item><title>üè° Homelab III: Automation with Ansible and Hardening Access</title><link>https://blog.reb.gg/posts/03-homelab-pt3/</link><pubDate>Tue, 11 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/03-homelab-pt3/</guid><description>&lt;p>In the previous part of this series, I created a two-node Proxmox cluster along with redundant (ZFS) and shared (NFS) storage. In this part, I&amp;rsquo;ll go over how to connect to the host machines with Ansible, harden access, and setup some minor user management. This&amp;rsquo;ll all be through an automatic, idempotent configuration process.&lt;/p>
&lt;h2 id="what-is-ansible">
 &lt;a href="#what-is-ansible">#&lt;/a>
 What is Ansible?
&lt;/h2>
&lt;p>Ansible is a great automation platform from Red Hat (they bought AnsibleWorks), and it&amp;rsquo;s an extremely popular tool making it a great learning exercise for the homelab. It has an agentless architecture, so it&amp;rsquo;s super simple to setup only requiring an SSH connection. I&amp;rsquo;ll use my laptop to manage Ansible to the controlled machines. In a &amp;ldquo;real world&amp;rdquo; environment, this would typically be done on a &lt;a href="https://en.wikipedia.org/wiki/Bastion_host">bastion&lt;/a>.&lt;/p></description></item><item><title>üè° Homelab II: Proxmox cluster, ZFS and NFS</title><link>https://blog.reb.gg/posts/02-homelab-pt2/</link><pubDate>Mon, 10 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/02-homelab-pt2/</guid><description>&lt;p>In the previous part of this series, I assembled (and modified) hardware and setup the base operating systems on the machines. In this part, I&amp;rsquo;ll go over how to connect the Proxmox nodes together, add a quorum device and provision some storage with ZFS. Also one of the ZFS drives will be configured with NFS to share container templates, ISOs, and snippets.&lt;/p>
&lt;h2 id="cluster">
 &lt;a href="#cluster">#&lt;/a>
 Cluster
&lt;/h2>
&lt;p>If you only have one machine in your homelab, you can skip this step.&lt;/p></description></item><item><title>üè° Homelab I: Intro, Hardware and Proxmox install</title><link>https://blog.reb.gg/posts/01-homelab-pt1/</link><pubDate>Sun, 09 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/01-homelab-pt1/</guid><description>&lt;p>üëã Hey y&amp;rsquo;all, welcome to the start of my homelab (or, the latest iteration of it). I&amp;rsquo;m documenting my homelab setup as a helpful guide for others to learn, detailing some of the annoying issues I encountered and some of the duct tape solutions. These are also backup instructions for when I inevitably scrap this homelab, rebuild, and forget how I did everything.&lt;/p>
&lt;p>This series will be centered around the setup and automation of a Promox cluster comprised of three very different machines. The virtualization cluster will house a variety of workloads, including:&lt;/p></description></item></channel></rss>
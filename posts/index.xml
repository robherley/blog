<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on rob's blog</title><link>https://blog.reb.gg/posts/</link><description>Recent content in Posts on rob's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Rob Herley</copyright><lastBuildDate>Sat, 23 Jul 2022 00:51:58 -0400</lastBuildDate><atom:link href="https://blog.reb.gg/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>üé® Beautify your Go tests on GitHub Actions</title><link>https://blog.reb.gg/posts/08-beautify-go-tests/</link><pubDate>Sat, 23 Jul 2022 00:51:58 -0400</pubDate><guid>https://blog.reb.gg/posts/08-beautify-go-tests/</guid><description>Was this made for humans? Although simple, Go&amp;rsquo;s default testing output leaves a lot to be desired:
This has led rise to some other wrappers for go test, solely to be a better formatter for humans. For example, gotestsum does this quite well:
This is definitely an improvement, and gotestsum even has additional formatting like exporting to JUnit XML.
But, what if CI could produce a rich, interactive, summary like this:</description></item><item><title>‚òï Rewriting tiny.coffee to &lt; 100 lines of Go</title><link>https://blog.reb.gg/posts/07-go-tiny-coffee/</link><pubDate>Sun, 06 Mar 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/07-go-tiny-coffee/</guid><description>History of tiny.coffee There are people in this world that suffer from an incredible problem &amp;ndash; the unresistable urge to buy vanity domains. I am one of those people, and one of favorites (excluding my brief ownership of ibm.lol)1 is tiny.coffee.
At first I didn&amp;rsquo;t know what I wanted to do with it, but then I was inspired by parrot.live! When running curl parrot.live, you will be greeted with a ASCII party parrot in your terminal:</description></item><item><title>üè° Homelab VI: Terraforming Proxmox</title><link>https://blog.reb.gg/posts/06-homelab-pt6/</link><pubDate>Fri, 14 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/06-homelab-pt6/</guid><description>In the previous part of this series, I configured a template VM with cloud-init configs for zero intervention VM automation after provision.
In this part, I&amp;rsquo;ll setup a basic HashiCorp Terraform project for infrastructure as code (IaC) to provision the guest VMs and containers from Proxmox. This will be a great foundation for the homelab, as Terraform can be expanded to cloud automation as well, such as managing Cloudflare DNS records.</description></item><item><title>üè° Homelab V: Proxmox VMs and cloud-init</title><link>https://blog.reb.gg/posts/05-homelab-pt5/</link><pubDate>Thu, 13 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/05-homelab-pt5/</guid><description>In the previous part of this series, I setup a Proxmox dynamic inventory with Ansible and created a basic LXC template for creating containers that were automation ready.
In this part, I&amp;rsquo;ll setup some cloud-init configs to initalize VMs in a state where they can automatically be managed by Ansible.
Cloud Images While it&amp;rsquo;s possible to prepare custom base images for cloud-init, many Linux distributions already provide ready-to-use images, such as Ubuntu, Fedora, Debian, etc.</description></item><item><title>üè° Homelab IV: Proxmox Dynamic Inventory and LXC Templates</title><link>https://blog.reb.gg/posts/04-homelab-pt4/</link><pubDate>Wed, 12 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/04-homelab-pt4/</guid><description>In the previous part of this series, I configured Ansible and made some basic playbooks for the homelab management. Eventually, I&amp;rsquo;ll be deploying a plethora of VMs and containers, but managing a gigantic inventory every time a guest is spun up/down would be a hassle. Fortunately, there are community plugins for Ansible that allow the use of a Proxmox cluster as a dynamic inventory.
In this part, I&amp;rsquo;ll setup some Proxmox API users for automation, setup a dynamic inventory for Proxmox guests and prepare a template for Linux containers.</description></item><item><title>üè° Homelab III: Automation with Ansible and Hardening Access</title><link>https://blog.reb.gg/posts/03-homelab-pt3/</link><pubDate>Tue, 11 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/03-homelab-pt3/</guid><description>In the previous part of this series, I created a two-node Proxmox cluster along with redundant (ZFS) and shared (NFS) storage. In this part, I&amp;rsquo;ll go over how to connect to the host machines with Ansible, harden access, and setup some minor user management. This&amp;rsquo;ll all be through an automatic, idempotent configuration process.
What is Ansible? Ansible is a great automation platform from Red Hat (they bought AnsibleWorks), and it&amp;rsquo;s an extremely popular tool making it a great learning exercise for the homelab.</description></item><item><title>üè° Homelab II: Proxmox cluster, ZFS and NFS</title><link>https://blog.reb.gg/posts/02-homelab-pt2/</link><pubDate>Mon, 10 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/02-homelab-pt2/</guid><description>In the previous part of this series, I assembled (and modified) hardware and setup the base operating systems on the machines. In this part, I&amp;rsquo;ll go over how to connect the Proxmox nodes together, add a quorum device and provision some storage with ZFS. Also one of the ZFS drives will be configured with NFS to share container templates, ISOs, and snippets.
Cluster If you only have one machine in your homelab, you can skip this step.</description></item><item><title>üè° Homelab I: Intro, Hardware and Proxmox install</title><link>https://blog.reb.gg/posts/01-homelab-pt1/</link><pubDate>Sun, 09 Jan 2022 00:00:00 -0500</pubDate><guid>https://blog.reb.gg/posts/01-homelab-pt1/</guid><description>üëã Hey y&amp;rsquo;all, welcome to the start of my homelab (or, the latest iteration of it). I&amp;rsquo;m documenting my homelab setup as a helpful guide for others to learn, detailing some of the annoying issues I encountered and some of the duct tape solutions. These are also backup instructions for when I inevitably scrap this homelab, rebuild, and forget how I did everything.
This series will be centered around the setup and automation of a Promox cluster comprised of three very different machines.</description></item></channel></rss>
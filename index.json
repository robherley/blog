{"version":"https://www.jsonfeed.org/version/1.1/","title":"rob's blog","home_page_url":"https://blog.reb.gg/","feed_url":"https://blog.reb.gg/index.json","items":[{"id":"https://blog.reb.gg/posts/08-beautify-go-tests/","title":"🎨 Beautify your Go tests on GitHub Actions","content_text":"\u003ch2 id=\"was-this-made-for-humans\"\u003e\n  \u003ca href=\"#was-this-made-for-humans\"\u003e#\u003c/a\u003e\n  Was this made for humans?\n\u003c/h2\u003e\n\u003cp\u003eAlthough simple, Go\u0026rsquo;s default testing output leaves a lot to be desired:\u003c/p\u003e\n\u003cp\u003e\n\n  \u003cimg src=\"/content/beautify-go-tests/gotest.png\" alt=\"go test output\"\u003e\n\n\u003c/p\u003e\n\u003cp\u003eThis has led rise to some other wrappers for \u003ccode\u003ego test\u003c/code\u003e, solely to be a better formatter for humans. For example, \u003ca href=\"https://github.com/gotestyourself/gotestsum\"\u003e\u003ccode\u003egotestsum\u003c/code\u003e\u003c/a\u003e does this quite well:\u003c/p\u003e\n\u003cp\u003e\n\n  \u003cimg src=\"/content/beautify-go-tests/gotestsum.png\" alt=\"gotestsum output\"\u003e\n\n\u003c/p\u003e\n\u003cp\u003eThis is definitely an improvement, and \u003ccode\u003egotestsum\u003c/code\u003e even has additional formatting like exporting to JUnit XML.\u003c/p\u003e\n\u003cp\u003eBut, what if CI could produce a rich, interactive, summary like this:\u003c/p\u003e","url":"https://blog.reb.gg/posts/08-beautify-go-tests/","date_published":"2022-07-23 00:51:58 -0400 -0400","tags":["golang","testing","github","actions"]},{"id":"https://blog.reb.gg/posts/07-go-tiny-coffee/","title":"☕ Rewriting tiny.coffee to < 100 lines of Go","content_text":"\u003ch2 id=\"history-of-tinycoffee\"\u003e\n  \u003ca href=\"#history-of-tinycoffee\"\u003e#\u003c/a\u003e\n  History of tiny.coffee\n\u003c/h2\u003e\n\u003cp\u003eThere are people in this world that suffer from an incredible problem \u0026ndash; the \u003cstrong\u003eunresistable urge\u003c/strong\u003e to buy vanity domains. I am one of those people, and one of favorites (excluding my brief ownership of \u003ccode\u003eibm.lol\u003c/code\u003e)\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e is \u003ca href=\"https://tiny.coffee\"\u003etiny.coffee\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAt first I didn\u0026rsquo;t know \u003cem\u003ewhat\u003c/em\u003e I wanted to do with it, but then I was inspired by \u003ca href=\"https://github.com/hugomd/parrot.live\"\u003eparrot.live\u003c/a\u003e! When running \u003ccode\u003ecurl parrot.live\u003c/code\u003e, you will be greeted with a ASCII party parrot in your terminal:\u003c/p\u003e","url":"https://blog.reb.gg/posts/07-go-tiny-coffee/","date_published":"2022-03-06 00:00:00 -0500 -0500","tags":["golang","http","curl","container"]},{"id":"https://blog.reb.gg/posts/06-homelab-pt6/","title":"🏡 Homelab VI: Terraforming Proxmox","content_text":"\u003cp\u003eIn the previous part of this series, I configured a template VM with cloud-init configs for zero intervention VM automation after provision.\u003c/p\u003e\n\u003cp\u003eIn this part, I\u0026rsquo;ll setup a basic HashiCorp Terraform project for infrastructure as code (IaC) to provision the guest VMs and containers from Proxmox. This will be a great foundation for the homelab, as Terraform can be expanded to cloud automation as well, such as \u003ca href=\"https://registry.terraform.io/providers/cloudflare/cloudflare/latest/docs\"\u003emanaging Cloudflare DNS records\u003c/a\u003e.\u003c/p\u003e","url":"https://blog.reb.gg/posts/06-homelab-pt6/","date_published":"2022-01-14 00:00:00 -0500 -0500","tags":["proxmox","vm","lxc","terraform"]},{"id":"https://blog.reb.gg/posts/05-homelab-pt5/","title":"🏡 Homelab V: Proxmox VMs and cloud-init","content_text":"\u003cp\u003eIn the previous part of this series, I setup a Proxmox dynamic inventory with Ansible and created a basic LXC template for creating containers that were automation ready.\u003c/p\u003e\n\u003cp\u003eIn this part, I\u0026rsquo;ll setup some \u003ca href=\"https://cloudinit.readthedocs.io/en/latest/\"\u003ecloud-init\u003c/a\u003e configs to initalize VMs in a state where they can automatically be managed by Ansible.\u003c/p\u003e\n\u003ch2 id=\"cloud-images\"\u003e\n  \u003ca href=\"#cloud-images\"\u003e#\u003c/a\u003e\n  Cloud Images\n\u003c/h2\u003e\n\u003cp\u003eWhile it\u0026rsquo;s possible to prepare custom base images for cloud-init, many Linux distributions already provide ready-to-use images, such as \u003ca href=\"https://cloud-images.ubuntu.com\"\u003eUbuntu\u003c/a\u003e, \u003ca href=\"https://alt.fedoraproject.org/cloud/\"\u003eFedora\u003c/a\u003e, \u003ca href=\"https://cloud.debian.org/images/cloud/\"\u003eDebian\u003c/a\u003e, etc. This allows for a (mostly) unified configuration that can work across distros and even some *BSD variants.\u003c/p\u003e","url":"https://blog.reb.gg/posts/05-homelab-pt5/","date_published":"2022-01-13 00:00:00 -0500 -0500","tags":["proxmox","vm","cloud-init"]},{"id":"https://blog.reb.gg/posts/04-homelab-pt4/","title":"🏡 Homelab IV: Proxmox Dynamic Inventory and LXC Templates","content_text":"\u003cp\u003eIn the previous part of this series, I configured Ansible and made some basic playbooks for the homelab management. Eventually, I\u0026rsquo;ll be deploying a plethora of VMs and containers, but managing a gigantic inventory every time a guest is spun up/down would be a hassle. Fortunately, there are community plugins for Ansible that allow the use of a Proxmox cluster as a \u003ca href=\"https://docs.ansible.com/ansible/latest/user_guide/intro_dynamic_inventory.html\"\u003edynamic inventory\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIn this part, I\u0026rsquo;ll setup some Proxmox API users for automation, setup a dynamic inventory for Proxmox guests and prepare a template for Linux containers.\u003c/p\u003e","url":"https://blog.reb.gg/posts/04-homelab-pt4/","date_published":"2022-01-12 00:00:00 -0500 -0500","tags":["proxmox","ansible","lxc","systemd"]},{"id":"https://blog.reb.gg/posts/03-homelab-pt3/","title":"🏡 Homelab III: Automation with Ansible and Hardening Access","content_text":"\u003cp\u003eIn the previous part of this series, I created a two-node Proxmox cluster along with redundant (ZFS) and shared (NFS) storage. In this part, I\u0026rsquo;ll go over how to connect to the host machines with Ansible, harden access, and setup some minor user management. This\u0026rsquo;ll all be through an automatic, idempotent configuration process.\u003c/p\u003e\n\u003ch2 id=\"what-is-ansible\"\u003e\n  \u003ca href=\"#what-is-ansible\"\u003e#\u003c/a\u003e\n  What is Ansible?\n\u003c/h2\u003e\n\u003cp\u003eAnsible is a great automation platform from Red Hat (they bought AnsibleWorks), and it\u0026rsquo;s an extremely popular tool making it a great learning exercise for the homelab. It has an agentless architecture, so it\u0026rsquo;s super simple to setup only requiring an SSH connection. I\u0026rsquo;ll use my laptop to manage Ansible to the controlled machines. In a \u0026ldquo;real world\u0026rdquo; environment, this would typically be done on a \u003ca href=\"https://en.wikipedia.org/wiki/Bastion_host\"\u003ebastion\u003c/a\u003e.\u003c/p\u003e","url":"https://blog.reb.gg/posts/03-homelab-pt3/","date_published":"2022-01-11 00:00:00 -0500 -0500","tags":["proxmox","ansible","ssh"]},{"id":"https://blog.reb.gg/posts/02-homelab-pt2/","title":"🏡 Homelab II: Proxmox cluster, ZFS and NFS","content_text":"\u003cp\u003eIn the previous part of this series, I assembled (and modified) hardware and setup the base operating systems on the machines. In this part, I\u0026rsquo;ll go over how to connect the Proxmox nodes together, add a quorum device and provision some storage with ZFS. Also one of the ZFS drives will be configured with NFS to share container templates, ISOs, and snippets.\u003c/p\u003e\n\u003ch2 id=\"cluster\"\u003e\n  \u003ca href=\"#cluster\"\u003e#\u003c/a\u003e\n  Cluster\n\u003c/h2\u003e\n\u003cp\u003eIf you only have one machine in your homelab, you can skip this step.\u003c/p\u003e","url":"https://blog.reb.gg/posts/02-homelab-pt2/","date_published":"2022-01-10 00:00:00 -0500 -0500","tags":["proxmox","zfs","nfs","cluster"]},{"id":"https://blog.reb.gg/posts/01-homelab-pt1/","title":"🏡 Homelab I: Intro, Hardware and Proxmox install","content_text":"\u003cp\u003e👋 Hey y\u0026rsquo;all, welcome to the start of my homelab (or, the latest iteration of it). I\u0026rsquo;m documenting my homelab setup as a helpful guide for others to learn, detailing some of the annoying issues I encountered and some of the duct tape solutions. These are also backup instructions for when I inevitably scrap this homelab, rebuild, and forget how I did everything.\u003c/p\u003e\n\u003cp\u003eThis series will be centered around the setup and automation of a Promox cluster comprised of three very different machines. The virtualization cluster will house a variety of workloads, including:\u003c/p\u003e","url":"https://blog.reb.gg/posts/01-homelab-pt1/","date_published":"2022-01-09 00:00:00 -0500 -0500","tags":["proxmox","zfs","hardware"]}]}